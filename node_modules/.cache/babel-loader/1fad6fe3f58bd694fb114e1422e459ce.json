{"ast":null,"code":"const Emote = require('./Emote');\n\nconst Constants = require('../util/Constants');\n/** @extends Emote */\n\n\nclass FFZEmote extends Emote {\n  /**\r\n   * An FFZ emote.\r\n   * @param {Channel} channel - Channel this emote belongs to.\r\n   * @param {string} id - ID of the emote.\r\n   * @param {data} data - The raw emote data.\r\n   */\n  constructor(channel, id, data) {\n    super(channel, id, data);\n    this.type = 'ffz';\n  }\n  /**\r\n   * The channel of this emote's creator.\r\n   * Not guaranteed to contain the emote, or be cached.\r\n   * @readonly\r\n   * @type {?Channel}\r\n   */\n\n\n  get owner() {\n    return this.fetcher.channels.get(this.ownerName);\n  }\n\n  _setup(data) {\n    super._setup(data);\n\n    this.code = data.name;\n    /**\r\n     * The name of the emote creator's channel.\r\n     * @type {string}\r\n     */\n\n    this.ownerName = data.owner.name;\n    /**\r\n     * Available image sizes.\r\n     * @type {string[]}\r\n     */\n\n    this.sizes = Object.keys(data.urls);\n    /**\r\n     * The image type of the emote.\r\n     * @type {string}\r\n     */\n\n    this.imageType = 'png';\n  }\n  /**\r\n   * Gets the image link of the emote.\r\n   * @param {number} size - The size of the image.\r\n   * @returns {string}\r\n   */\n\n\n  toLink(size = 0) {\n    size = this.sizes[size];\n    return Constants.FFZ.CDN(this.id, size); // eslint-disable-line new-cap\n  }\n\n}\n\nmodule.exports = FFZEmote;","map":{"version":3,"sources":["/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/node_modules/twitch-emoticons/src/struct/FFZEmote.js"],"names":["Emote","require","Constants","FFZEmote","constructor","channel","id","data","type","owner","fetcher","channels","get","ownerName","_setup","code","name","sizes","Object","keys","urls","imageType","toLink","size","FFZ","CDN","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAzB;AAEA;;;AACA,MAAME,QAAN,SAAuBH,KAAvB,CAA6B;AACzB;;;;;;AAMAI,EAAAA,WAAW,CAACC,OAAD,EAAUC,EAAV,EAAcC,IAAd,EAAoB;AAC3B,UAAMF,OAAN,EAAeC,EAAf,EAAmBC,IAAnB;AACA,SAAKC,IAAL,GAAY,KAAZ;AACH;AAED;;;;;;;;AAMA,MAAIC,KAAJ,GAAY;AACR,WAAO,KAAKC,OAAL,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B,KAAKC,SAA/B,CAAP;AACH;;AAEDC,EAAAA,MAAM,CAACP,IAAD,EAAO;AACT,UAAMO,MAAN,CAAaP,IAAb;;AACA,SAAKQ,IAAL,GAAYR,IAAI,CAACS,IAAjB;AAEA;;;;;AAIA,SAAKH,SAAL,GAAiBN,IAAI,CAACE,KAAL,CAAWO,IAA5B;AAEA;;;;;AAIA,SAAKC,KAAL,GAAaC,MAAM,CAACC,IAAP,CAAYZ,IAAI,CAACa,IAAjB,CAAb;AAEA;;;;;AAIA,SAAKC,SAAL,GAAiB,KAAjB;AACH;AAED;;;;;;;AAKAC,EAAAA,MAAM,CAACC,IAAI,GAAG,CAAR,EAAW;AACbA,IAAAA,IAAI,GAAG,KAAKN,KAAL,CAAWM,IAAX,CAAP;AACA,WAAOrB,SAAS,CAACsB,GAAV,CAAcC,GAAd,CAAkB,KAAKnB,EAAvB,EAA2BiB,IAA3B,CAAP,CAFa,CAE4B;AAC5C;;AArDwB;;AAwD7BG,MAAM,CAACC,OAAP,GAAiBxB,QAAjB","sourcesContent":["const Emote = require('./Emote');\r\nconst Constants = require('../util/Constants');\r\n\r\n/** @extends Emote */\r\nclass FFZEmote extends Emote {\r\n    /**\r\n     * An FFZ emote.\r\n     * @param {Channel} channel - Channel this emote belongs to.\r\n     * @param {string} id - ID of the emote.\r\n     * @param {data} data - The raw emote data.\r\n     */\r\n    constructor(channel, id, data) {\r\n        super(channel, id, data);\r\n        this.type = 'ffz';\r\n    }\r\n\r\n    /**\r\n     * The channel of this emote's creator.\r\n     * Not guaranteed to contain the emote, or be cached.\r\n     * @readonly\r\n     * @type {?Channel}\r\n     */\r\n    get owner() {\r\n        return this.fetcher.channels.get(this.ownerName);\r\n    }\r\n\r\n    _setup(data) {\r\n        super._setup(data);\r\n        this.code = data.name;\r\n\r\n        /**\r\n         * The name of the emote creator's channel.\r\n         * @type {string}\r\n         */\r\n        this.ownerName = data.owner.name;\r\n\r\n        /**\r\n         * Available image sizes.\r\n         * @type {string[]}\r\n         */\r\n        this.sizes = Object.keys(data.urls);\r\n\r\n        /**\r\n         * The image type of the emote.\r\n         * @type {string}\r\n         */\r\n        this.imageType = 'png';\r\n    }\r\n\r\n    /**\r\n     * Gets the image link of the emote.\r\n     * @param {number} size - The size of the image.\r\n     * @returns {string}\r\n     */\r\n    toLink(size = 0) {\r\n        size = this.sizes[size];\r\n        return Constants.FFZ.CDN(this.id, size); // eslint-disable-line new-cap\r\n    }\r\n}\r\n\r\nmodule.exports = FFZEmote;\r\n"]},"metadata":{},"sourceType":"script"}