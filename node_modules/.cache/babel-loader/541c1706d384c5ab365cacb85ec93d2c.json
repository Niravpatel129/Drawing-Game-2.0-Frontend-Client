{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/src/components/Canvas/Canvas.js\";\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport SocketContext from \"../../context\";\nimport Chat from \"../Chat/Chat\";\nimport RoomNumber from \"../RoomNumber/RoomNumber\";\nimport TimerClock from \"../TimerClock/TimerClock\";\nimport ToolBar from \"../ToolBar/ToolBar\";\nimport UserList from \"../UserList/UserList\";\nimport WordBlock from \"../WordBlock/WordBlock\";\nimport \"./Canvas.scss\";\nimport StatusMessage from \"../StatusMessage/StatusMessage\"; // let socket;\n\nfunction Canvas() {\n  let _useContext = useContext(SocketContext),\n      socket = _useContext.socket;\n\n  const _useSelector = useSelector(state => state.contactReducer),\n        name = _useSelector.name,\n        room = _useSelector.room;\n\n  const canDraw = useSelector(state => state.canDrawReducer);\n  const brushColor = useSelector(state => state.ColorReducer);\n  const brushWidth = useSelector(state => state.brushWidthReducer);\n  const history = useHistory();\n  const canvas = useRef();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setTimeout(() => {\n      if (canvas.current) {\n        canvas.current.clear();\n      }\n    }, 600);\n  }, [canDraw]);\n  useEffect(() => {\n    socket.on(\"roundEnded\", () => {\n      dispatch({\n        type: \"SET_GUESS\",\n        payload: false\n      });\n      dispatch({\n        type: \"SET_DRAW\",\n        payload: false\n      });\n\n      if (canvas.current) {\n        canvas.current.clear();\n      }\n    });\n    let googleUserInfo = JSON.parse(localStorage.getItem(\"loginUserInfo\"));\n\n    if (!googleUserInfo) {\n      socket.off();\n      history.push(\"/login\");\n      alert(\"Login first please!\");\n    } else {\n      socket.emit(\"join\", {\n        name: googleUserInfo.name,\n        room,\n        googleUserInfo\n      }, err => {\n        alert(err || \"not sure of the error\");\n        socket.emit(\"disconnectUser\", googleUserInfo);\n        socket.off();\n        history.push(\"/\");\n      });\n    }\n  }, [socket, history, room, dispatch]);\n  useEffect(() => {\n    socket.on(\"updateData\", data => {\n      if (canvas.current && data) {\n        canvas.current.loadSaveData(data, true);\n      }\n    });\n    socket.on(\"newJoinNotification\", name => {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        payload: true\n      });\n      dispatch({\n        type: \"SET_MESSAGE\",\n        payload: `${name} has joined the room`\n      });\n    });\n  }, [room, name, socket, history, dispatch]);\n  useEffect(() => {\n    return () => {\n      console.log(\"will unmount\");\n      socket.emit(\"disconnectUser\", JSON.parse(localStorage.getItem(\"loginUserInfo\")));\n    };\n  }, [socket]);\n\n  const handleMouseDown = () => {\n    socket.emit(\"drawingData\", {\n      data: canvas.current.getSaveData(),\n      room\n    });\n  };\n\n  return React.createElement(\"section\", {\n    className: \"Canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"CanvasContainer\",\n    onMouseUp: handleMouseDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(CanvasDraw, {\n    style: {\n      background: \"none\"\n    },\n    ref: canvas,\n    disabled: !canDraw,\n    brushRadius: brushWidth,\n    brushColor: brushColor,\n    canvasWidth: 800,\n    canvasHeight: 600,\n    lazyRadius: 0,\n    hideInterface: true,\n    hideGrid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(ToolBar, {\n    canvasRef: canvas,\n    handleMouseDown: handleMouseDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(TimerClock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(WordBlock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(RoomNumber, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(StatusMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }))));\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/src/components/Canvas/Canvas.js"],"names":["React","useContext","useEffect","useRef","CanvasDraw","useDispatch","useSelector","useHistory","SocketContext","Chat","RoomNumber","TimerClock","ToolBar","UserList","WordBlock","StatusMessage","Canvas","socket","state","contactReducer","name","room","canDraw","canDrawReducer","brushColor","ColorReducer","brushWidth","brushWidthReducer","history","canvas","dispatch","setTimeout","current","clear","on","type","payload","googleUserInfo","JSON","parse","localStorage","getItem","off","push","alert","emit","err","data","loadSaveData","console","log","handleMouseDown","getSaveData","background"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport SocketContext from \"../../context\";\nimport Chat from \"../Chat/Chat\";\nimport RoomNumber from \"../RoomNumber/RoomNumber\";\nimport TimerClock from \"../TimerClock/TimerClock\";\nimport ToolBar from \"../ToolBar/ToolBar\";\nimport UserList from \"../UserList/UserList\";\nimport WordBlock from \"../WordBlock/WordBlock\";\nimport \"./Canvas.scss\";\nimport StatusMessage from \"../StatusMessage/StatusMessage\";\n\n// let socket;\n\nfunction Canvas() {\n  let { socket } = useContext(SocketContext);\n  const { name, room } = useSelector(state => state.contactReducer);\n  const canDraw = useSelector(state => state.canDrawReducer);\n  const brushColor = useSelector(state => state.ColorReducer);\n  const brushWidth = useSelector(state => state.brushWidthReducer);\n\n  const history = useHistory();\n  const canvas = useRef();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (canvas.current) {\n        canvas.current.clear();\n      }\n    }, 600);\n  }, [canDraw]);\n\n  useEffect(() => {\n    socket.on(\"roundEnded\", () => {\n      dispatch({ type: \"SET_GUESS\", payload: false });\n      dispatch({ type: \"SET_DRAW\", payload: false });\n\n      if (canvas.current) {\n        canvas.current.clear();\n      }\n    });\n\n    let googleUserInfo = JSON.parse(localStorage.getItem(\"loginUserInfo\"));\n\n    if (!googleUserInfo) {\n      socket.off();\n      history.push(\"/login\");\n      alert(\"Login first please!\");\n    } else {\n      socket.emit(\n        \"join\",\n        { name: googleUserInfo.name, room, googleUserInfo },\n        err => {\n          alert(err || \"not sure of the error\");\n          socket.emit(\"disconnectUser\", googleUserInfo);\n          socket.off();\n          history.push(\"/\");\n        }\n      );\n    }\n  }, [socket, history, room, dispatch]);\n\n  useEffect(() => {\n    socket.on(\"updateData\", data => {\n      if (canvas.current && data) {\n        canvas.current.loadSaveData(data, true);\n      }\n    });\n\n    socket.on(\"newJoinNotification\", name => {\n      dispatch({ type: \"SET_NOTIFICATION\", payload: true });\n      dispatch({ type: \"SET_MESSAGE\", payload: `${name} has joined the room` });\n    });\n  }, [room, name, socket, history, dispatch]);\n\n  useEffect(() => {\n    return () => {\n      console.log(\"will unmount\");\n      socket.emit(\n        \"disconnectUser\",\n        JSON.parse(localStorage.getItem(\"loginUserInfo\"))\n      );\n    };\n  }, [socket]);\n\n  const handleMouseDown = () => {\n    socket.emit(\"drawingData\", {\n      data: canvas.current.getSaveData(),\n      room\n    });\n  };\n\n  return (\n    <section className=\"Canvas\">\n      <div className=\"Container\">\n        <div className=\"CanvasContainer\" onMouseUp={handleMouseDown}>\n          <CanvasDraw\n            style={{ background: \"none\" }}\n            ref={canvas}\n            disabled={!canDraw}\n            brushRadius={brushWidth}\n            brushColor={brushColor}\n            canvasWidth={800}\n            canvasHeight={600}\n            lazyRadius={0}\n            hideInterface={true}\n            hideGrid={true}\n          />\n          {/* <Chat /> */}\n\n          <ToolBar canvasRef={canvas} handleMouseDown={handleMouseDown} />\n          {/* <UserList /> */}\n          <TimerClock />\n          <WordBlock />\n          <RoomNumber />\n          <StatusMessage />\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}