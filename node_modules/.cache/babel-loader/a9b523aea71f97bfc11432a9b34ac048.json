{"ast":null,"code":"import _slicedToArray from \"/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/src/components/UserList/UserList.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport \"./UserList.scss\";\nimport SocketContext from \"../../context\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction UserList() {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        roomData = _useState2[0],\n        setRoomData = _useState2[1];\n\n  let _useContext = useContext(SocketContext),\n      socket = _useContext.socket;\n\n  let _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      users = _useState4[0],\n      updateUsers = _useState4[1];\n\n  let _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      drawerId = _useState6[0],\n      updateDrawer = _useState6[1];\n\n  let _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      drawerName = _useState8[0],\n      updateDrawerName = _useState8[1];\n\n  const _useSelector = useSelector(state => state.contactReducer),\n        room = _useSelector.room;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (roomData) {\n      if (users.length >= 2 && !roomData.gameData.gameStarted) {\n        setTimeout(() => {\n          socket.emit(\"gameStart\", room);\n        }, 2000);\n      }\n    }\n\n    socket.on(\"gameStart\", room => {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        payload: true\n      });\n      dispatch({\n        type: \"SET_MESSAGE\",\n        payload: `${room} Room has started the game 🎮`\n      });\n    });\n  }, [users, roomData, socket, room, dispatch]);\n  useEffect(() => {\n    socket.on(\"checkUserListAgain\", () => {\n      socket.emit(\"getUserList\", room);\n    });\n    socket.on(\"getAllUsers\", res => {\n      updateUsers(res);\n    });\n    socket.on(\"sendTime\", res => {\n      const draw = res.find(i => i.roomId === room);\n      setRoomData(draw);\n\n      if (draw && draw.gameData.drawer.user) {\n        updateDrawerName(draw.gameData.drawer.user.googleUserInfo.name);\n        updateDrawer(draw.gameData.drawer.user.googleUserInfo.googleId);\n      }\n    });\n  }, [socket, room]);\n  useEffect(() => {\n    dispatch({\n      type: \"SET_NOTIFICATION\",\n      payload: true\n    });\n    dispatch({\n      type: \"SET_MESSAGE\",\n      payload: `${drawerName} is now Drawing 🎨🎨`\n    });\n  }, [drawerId, dispatch]);\n\n  const renderUser = () => {\n    if (users) {\n      return users.map((i, index) => {\n        if (i.user.googleUserInfo.googleId === drawerId && roomData.gameData.gameStarted) {\n          return React.createElement(\"div\", {\n            className: \"user-card\",\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }, i.user.googleUserInfo.name, React.createElement(\"span\", {\n            role: \"img\",\n            \"aria-label\": \"pencil\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, \" \", \"\\u270F\\uFE0F\")), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, i.points, \" Points\"));\n        } else {\n          return React.createElement(\"div\", {\n            className: \"user-card\",\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, i.user.googleUserInfo.name), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, i.points, \" Points\"));\n        }\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"UserList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Players\"), renderUser());\n}\n\nexport default UserList;","map":{"version":3,"sources":["/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/src/components/UserList/UserList.js"],"names":["React","useContext","useEffect","useState","SocketContext","useSelector","useDispatch","UserList","roomData","setRoomData","socket","users","updateUsers","drawerId","updateDrawer","drawerName","updateDrawerName","state","contactReducer","room","dispatch","length","gameData","gameStarted","setTimeout","emit","on","type","payload","res","draw","find","i","roomId","drawer","user","googleUserInfo","name","googleId","renderUser","map","index","points"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport \"./UserList.scss\";\nimport SocketContext from \"../../context\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction UserList() {\n  const [roomData, setRoomData] = useState();\n  let { socket } = useContext(SocketContext);\n  let [users, updateUsers] = useState([]);\n  let [drawerId, updateDrawer] = useState();\n  let [drawerName, updateDrawerName] = useState(\"\");\n  const { room } = useSelector(state => state.contactReducer);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (roomData) {\n      if (users.length >= 2 && !roomData.gameData.gameStarted) {\n        setTimeout(() => {\n          socket.emit(\"gameStart\", room);\n        }, 2000);\n      }\n    }\n\n    socket.on(\"gameStart\", room => {\n      dispatch({ type: \"SET_NOTIFICATION\", payload: true });\n      dispatch({\n        type: \"SET_MESSAGE\",\n        payload: `${room} Room has started the game 🎮`\n      });\n    });\n  }, [users, roomData, socket, room, dispatch]);\n\n  useEffect(() => {\n    socket.on(\"checkUserListAgain\", () => {\n      socket.emit(\"getUserList\", room);\n    });\n\n    socket.on(\"getAllUsers\", res => {\n      updateUsers(res);\n    });\n\n    socket.on(\"sendTime\", res => {\n      const draw = res.find(i => i.roomId === room);\n      setRoomData(draw);\n      if (draw && draw.gameData.drawer.user) {\n        updateDrawerName(draw.gameData.drawer.user.googleUserInfo.name);\n        updateDrawer(draw.gameData.drawer.user.googleUserInfo.googleId);\n      }\n    });\n  }, [socket, room]);\n\n  useEffect(() => {\n    dispatch({ type: \"SET_NOTIFICATION\", payload: true });\n    dispatch({\n      type: \"SET_MESSAGE\",\n      payload: `${drawerName} is now Drawing 🎨🎨`\n    });\n  }, [drawerId, dispatch]);\n\n  const renderUser = () => {\n    if (users) {\n      return users.map((i, index) => {\n        if (\n          i.user.googleUserInfo.googleId === drawerId &&\n          roomData.gameData.gameStarted\n        ) {\n          return (\n            <div className=\"user-card\" key={index}>\n              <h3>\n                {i.user.googleUserInfo.name}\n                <span role=\"img\" aria-label=\"pencil\">\n                  {\" \"}\n                  ✏️\n                </span>\n              </h3>\n              <p>{i.points} Points</p>\n            </div>\n          );\n        } else {\n          return (\n            <div className=\"user-card\" key={index}>\n              <h3>{i.user.googleUserInfo.name}</h3>\n              <p>{i.points} Points</p>\n            </div>\n          );\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"UserList\">\n      <h4>Players</h4>\n      {renderUser()}\n    </div>\n  );\n}\n\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}