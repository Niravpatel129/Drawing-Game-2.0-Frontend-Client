{"ast":null,"code":"import _slicedToArray from \"/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/src/components/WordBlock/WordBlock.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport SocketContext from \"../../context\";\nimport \"./WordBlock.scss\";\n\nfunction WordBlock() {\n  let _useContext = useContext(SocketContext),\n      socket = _useContext.socket;\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        word = _useState2[0],\n        setWord = _useState2[1];\n\n  const _useSelector = useSelector(state => state.contactReducer),\n        room = _useSelector.room;\n\n  const canDraw = useSelector(state => state.canDrawReducer);\n  const guessedCorrect = useSelector(state => state.gussedCorrectReducer);\n  const clock = useSelector(state => state.timeReducer);\n  useEffect(() => {\n    if (clock) {// console.log(clock);\n    }\n  }, [clock]);\n  useEffect(() => {\n    socket.on(\"sendTime\", res => {\n      const time = res.find(i => i.roomId === room);\n      if (time) setWord(time.gameData.word);\n    });\n  }, [socket, word, room]);\n\n  const renderWord = () => {\n    let colorPreset;\n\n    if (guessedCorrect || canDraw) {\n      colorPreset = \"black\";\n    } else {\n      colorPreset = \"transparent\";\n    }\n\n    let showingWordIndex = [];\n\n    if (clock < 100) {\n      showingWordIndex.push(Math.floor(Math.random() * word.length));\n    }\n\n    console.log(showingWordIndex);\n    return word.split(\"\").map((i, index) => {\n      if (showingWordIndex.indexOf(i)) {\n        colorPreset = \"transparent\";\n      } else {\n        colorPreset = \"black\";\n      } // index === 1 || index === 2\n      //   ? (colorPreset = \"black\")\n      //   : (colorPreset = \"transparent\");\n\n\n      return React.createElement(\"span\", {\n        style: {\n          color: colorPreset\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          color: colorPreset\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, i));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"WordBlock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, renderWord());\n}\n\nexport default WordBlock;","map":{"version":3,"sources":["/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/src/components/WordBlock/WordBlock.js"],"names":["React","useContext","useEffect","useState","useSelector","SocketContext","WordBlock","socket","word","setWord","state","contactReducer","room","canDraw","canDrawReducer","guessedCorrect","gussedCorrectReducer","clock","timeReducer","on","res","time","find","i","roomId","gameData","renderWord","colorPreset","showingWordIndex","push","Math","floor","random","length","console","log","split","map","index","indexOf","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAO,kBAAP;;AAEA,SAASC,SAAT,GAAqB;AAAA,oBACFL,UAAU,CAACI,aAAD,CADR;AAAA,MACbE,MADa,eACbA,MADa;;AAAA,oBAEKJ,QAAQ,CAAC,EAAD,CAFb;AAAA;AAAA,QAEZK,IAFY;AAAA,QAENC,OAFM;;AAAA,uBAGFL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,cAAhB,CAHT;AAAA,QAGXC,IAHW,gBAGXA,IAHW;;AAInB,QAAMC,OAAO,GAAGT,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACI,cAAhB,CAA3B;AACA,QAAMC,cAAc,GAAGX,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACM,oBAAhB,CAAlC;AACA,QAAMC,KAAK,GAAGb,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACQ,WAAhB,CAAzB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,KAAJ,EAAW,CACT;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACY,EAAP,CAAU,UAAV,EAAsBC,GAAG,IAAI;AAC3B,YAAMC,IAAI,GAAGD,GAAG,CAACE,IAAJ,CAASC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaZ,IAA3B,CAAb;AACA,UAAIS,IAAJ,EAAUZ,OAAO,CAACY,IAAI,CAACI,QAAL,CAAcjB,IAAf,CAAP;AACX,KAHD;AAID,GALQ,EAKN,CAACD,MAAD,EAASC,IAAT,EAAeI,IAAf,CALM,CAAT;;AAOA,QAAMc,UAAU,GAAG,MAAM;AACvB,QAAIC,WAAJ;;AACA,QAAIZ,cAAc,IAAIF,OAAtB,EAA+B;AAC7Bc,MAAAA,WAAW,GAAG,OAAd;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,GAAG,aAAd;AACD;;AAED,QAAIC,gBAAgB,GAAG,EAAvB;;AACA,QAAIX,KAAK,GAAG,GAAZ,EAAiB;AACfW,MAAAA,gBAAgB,CAACC,IAAjB,CAAsBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBxB,IAAI,CAACyB,MAAhC,CAAtB;AACD;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYP,gBAAZ;AAEA,WAAOpB,IAAI,CAAC4B,KAAL,CAAW,EAAX,EAAeC,GAAf,CAAmB,CAACd,CAAD,EAAIe,KAAJ,KAAc;AACtC,UAAIV,gBAAgB,CAACW,OAAjB,CAAyBhB,CAAzB,CAAJ,EAAiC;AAC/BI,QAAAA,WAAW,GAAG,aAAd;AACD,OAFD,MAEO;AACLA,QAAAA,WAAW,GAAG,OAAd;AACD,OALqC,CAMtC;AACA;AACA;;;AACA,aACE;AAAM,QAAA,KAAK,EAAE;AAAEa,UAAAA,KAAK,EAAEb;AAAT,SAAb;AAAqC,QAAA,GAAG,EAAEW,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAEE,UAAAA,KAAK,EAAEb;AAAT,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmCJ,CAAnC,CADF,CADF;AAKD,KAdM,CAAP;AAeD,GA7BD;;AA+BA,SAAO;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BG,UAAU,EAAtC,CAAP;AACD;;AAED,eAAepB,SAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport SocketContext from \"../../context\";\nimport \"./WordBlock.scss\";\n\nfunction WordBlock() {\n  let { socket } = useContext(SocketContext);\n  const [word, setWord] = useState(\"\");\n  const { room } = useSelector(state => state.contactReducer);\n  const canDraw = useSelector(state => state.canDrawReducer);\n  const guessedCorrect = useSelector(state => state.gussedCorrectReducer);\n  const clock = useSelector(state => state.timeReducer);\n\n  useEffect(() => {\n    if (clock) {\n      // console.log(clock);\n    }\n  }, [clock]);\n\n  useEffect(() => {\n    socket.on(\"sendTime\", res => {\n      const time = res.find(i => i.roomId === room);\n      if (time) setWord(time.gameData.word);\n    });\n  }, [socket, word, room]);\n\n  const renderWord = () => {\n    let colorPreset;\n    if (guessedCorrect || canDraw) {\n      colorPreset = \"black\";\n    } else {\n      colorPreset = \"transparent\";\n    }\n\n    let showingWordIndex = [];\n    if (clock < 100) {\n      showingWordIndex.push(Math.floor(Math.random() * word.length));\n    }\n    console.log(showingWordIndex);\n\n    return word.split(\"\").map((i, index) => {\n      if (showingWordIndex.indexOf(i)) {\n        colorPreset = \"transparent\";\n      } else {\n        colorPreset = \"black\";\n      }\n      // index === 1 || index === 2\n      //   ? (colorPreset = \"black\")\n      //   : (colorPreset = \"transparent\");\n      return (\n        <span style={{ color: colorPreset }} key={index}>\n          <p style={{ color: colorPreset }}>{i}</p>\n        </span>\n      );\n    });\n  };\n\n  return <div className=\"WordBlock\">{renderWord()}</div>;\n}\n\nexport default WordBlock;\n"]},"metadata":{},"sourceType":"module"}