{"ast":null,"code":"const Emote = require('./Emote');\n\nconst Constants = require('../util/Constants');\n/** @extends Emote */\n\n\nclass BTTVEmote extends Emote {\n  /**\r\n   * A BTTV emote.\r\n   * @param {Channel} channel - Channel this emote belongs to.\r\n   * @param {string} id - ID of the emote.\r\n   * @param {data} data - The raw emote data.\r\n   */\n  constructor(channel, id, data) {\n    super(channel, id, data);\n    this.type = 'bttv';\n  }\n  /**\r\n   * The channel of this emote's creator.\r\n   * Not guaranteed to contain the emote, or be cached.\r\n   * @readonly\r\n   * @type {?Channel}\r\n   */\n\n\n  get owner() {\n    return this.fetcher.channels.get(this.ownerName);\n  }\n\n  _setup(data) {\n    super._setup(data);\n    /**\r\n     * The name of the emote creator's channel.\r\n     * Will be null for global emotes.\r\n     * @type {?string}\r\n     */\n\n\n    this.ownerName = data.channel;\n    /**\r\n     * The image type of the emote.\r\n     * @type {string}\r\n     */\n\n    this.imageType = data.imageType;\n  }\n  /**\r\n   * Gets the image link of the emote.\r\n   * @param {number} size - The size of the image, 0, 1, or 2.\r\n   * @returns {string}\r\n   */\n\n\n  toLink(size = 0) {\n    return Constants.BTTV.CDN(this.id, size); // eslint-disable-line new-cap\n  }\n\n}\n\nmodule.exports = BTTVEmote;","map":{"version":3,"sources":["/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/node_modules/twitch-emoticons/src/struct/BTTVEmote.js"],"names":["Emote","require","Constants","BTTVEmote","constructor","channel","id","data","type","owner","fetcher","channels","get","ownerName","_setup","imageType","toLink","size","BTTV","CDN","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAzB;AAEA;;;AACA,MAAME,SAAN,SAAwBH,KAAxB,CAA8B;AAC1B;;;;;;AAMAI,EAAAA,WAAW,CAACC,OAAD,EAAUC,EAAV,EAAcC,IAAd,EAAoB;AAC3B,UAAMF,OAAN,EAAeC,EAAf,EAAmBC,IAAnB;AACA,SAAKC,IAAL,GAAY,MAAZ;AACH;AAED;;;;;;;;AAMA,MAAIC,KAAJ,GAAY;AACR,WAAO,KAAKC,OAAL,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B,KAAKC,SAA/B,CAAP;AACH;;AAEDC,EAAAA,MAAM,CAACP,IAAD,EAAO;AACT,UAAMO,MAAN,CAAaP,IAAb;AAEA;;;;;;;AAKA,SAAKM,SAAL,GAAiBN,IAAI,CAACF,OAAtB;AAEA;;;;;AAIA,SAAKU,SAAL,GAAiBR,IAAI,CAACQ,SAAtB;AACH;AAED;;;;;;;AAKAC,EAAAA,MAAM,CAACC,IAAI,GAAG,CAAR,EAAW;AACb,WAAOf,SAAS,CAACgB,IAAV,CAAeC,GAAf,CAAmB,KAAKb,EAAxB,EAA4BW,IAA5B,CAAP,CADa,CAC6B;AAC7C;;AA9CyB;;AAiD9BG,MAAM,CAACC,OAAP,GAAiBlB,SAAjB","sourcesContent":["const Emote = require('./Emote');\r\nconst Constants = require('../util/Constants');\r\n\r\n/** @extends Emote */\r\nclass BTTVEmote extends Emote {\r\n    /**\r\n     * A BTTV emote.\r\n     * @param {Channel} channel - Channel this emote belongs to.\r\n     * @param {string} id - ID of the emote.\r\n     * @param {data} data - The raw emote data.\r\n     */\r\n    constructor(channel, id, data) {\r\n        super(channel, id, data);\r\n        this.type = 'bttv';\r\n    }\r\n\r\n    /**\r\n     * The channel of this emote's creator.\r\n     * Not guaranteed to contain the emote, or be cached.\r\n     * @readonly\r\n     * @type {?Channel}\r\n     */\r\n    get owner() {\r\n        return this.fetcher.channels.get(this.ownerName);\r\n    }\r\n\r\n    _setup(data) {\r\n        super._setup(data);\r\n\r\n        /**\r\n         * The name of the emote creator's channel.\r\n         * Will be null for global emotes.\r\n         * @type {?string}\r\n         */\r\n        this.ownerName = data.channel;\r\n\r\n        /**\r\n         * The image type of the emote.\r\n         * @type {string}\r\n         */\r\n        this.imageType = data.imageType;\r\n    }\r\n\r\n    /**\r\n     * Gets the image link of the emote.\r\n     * @param {number} size - The size of the image, 0, 1, or 2.\r\n     * @returns {string}\r\n     */\r\n    toLink(size = 0) {\r\n        return Constants.BTTV.CDN(this.id, size); // eslint-disable-line new-cap\r\n    }\r\n}\r\n\r\nmodule.exports = BTTVEmote;\r\n"]},"metadata":{},"sourceType":"script"}