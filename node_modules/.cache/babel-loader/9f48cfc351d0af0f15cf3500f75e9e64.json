{"ast":null,"code":"var _slicedToArray = require(\"/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/**\r\n * An extended Map with utility methods.\r\n * @class Collection\r\n */\nclass Collection extends Map {\n  /**\r\n   * Finds first matching value by property or function.\r\n   * Same as `Array#find`.\r\n   * @param {string|Function} propOrFunc - Property or function to test.\r\n   * @param {any} [value] - Value to find.\r\n   * @returns {any}\r\n   */\n  find(propOrFunc, value) {\n    if (typeof propOrFunc === 'string') {\n      if (typeof value === 'undefined') return null;\n\n      for (const item of this.values()) {\n        if (item[propOrFunc] === value) return item;\n      }\n\n      return null;\n    }\n\n    if (typeof propOrFunc === 'function') {\n      let i = 0;\n\n      for (const item of this.values()) {\n        if (propOrFunc(item, i, this)) return item;\n        i++;\n      }\n\n      return null;\n    }\n\n    return null;\n  }\n  /**\r\n   * Filters cache by function.\r\n   * Same as `Array#filter`.\r\n   * @param {Function} func - Function to test.\r\n   * @param {any} [thisArg] - The context for the function.\r\n   * @returns {Collection}\r\n   */\n\n\n  filter(func, thisArg) {\n    if (thisArg) func = func.bind(thisArg);\n    const results = new this.constructor();\n    let i = 0;\n\n    for (const _ref of this) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const key = _ref2[0];\n      const item = _ref2[1];\n      if (func(item, i, this)) results.set(key, item);\n      i++;\n    }\n\n    return results;\n  }\n  /**\r\n   * Maps cache by function.\r\n   * Same as `Array#map`.\r\n   * @param {Function} func - Function to use.\r\n   * @param {any} [thisArg] - The context for the function.\r\n   * @returns {any[]}\r\n   */\n\n\n  map(func, thisArg) {\n    if (thisArg) func = func.bind(thisArg);\n    const array = new Array(this.size);\n    let i = 0;\n\n    for (const item of this.values()) {\n      array[i] = func(item, i, this);\n      i++;\n    }\n\n    return array;\n  }\n\n}\n\nmodule.exports = Collection;","map":{"version":3,"sources":["/Users/admin/Desktop/Apps/multiplayer-drawing-game/client/node_modules/twitch-emoticons/src/util/Collection.js"],"names":["Collection","Map","find","propOrFunc","value","item","values","i","filter","func","thisArg","bind","results","constructor","key","set","map","array","Array","size","module","exports"],"mappings":";;AAAA;;;;AAIA,MAAMA,UAAN,SAAyBC,GAAzB,CAA6B;AACzB;;;;;;;AAOAC,EAAAA,IAAI,CAACC,UAAD,EAAaC,KAAb,EAAoB;AACpB,QAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAChC,UAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC,OAAO,IAAP;;AAClC,WAAK,MAAMC,IAAX,IAAmB,KAAKC,MAAL,EAAnB,EAAkC;AAC9B,YAAID,IAAI,CAACF,UAAD,CAAJ,KAAqBC,KAAzB,EAAgC,OAAOC,IAAP;AACnC;;AAED,aAAO,IAAP;AACH;;AAED,QAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AAClC,UAAII,CAAC,GAAG,CAAR;;AACA,WAAK,MAAMF,IAAX,IAAmB,KAAKC,MAAL,EAAnB,EAAkC;AAC9B,YAAIH,UAAU,CAACE,IAAD,EAAOE,CAAP,EAAU,IAAV,CAAd,EAA+B,OAAOF,IAAP;AAC/BE,QAAAA,CAAC;AACJ;;AAED,aAAO,IAAP;AACH;;AAED,WAAO,IAAP;AACH;AAED;;;;;;;;;AAOAC,EAAAA,MAAM,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAClB,QAAIA,OAAJ,EAAaD,IAAI,GAAGA,IAAI,CAACE,IAAL,CAAUD,OAAV,CAAP;AAEb,UAAME,OAAO,GAAG,IAAI,KAAKC,WAAT,EAAhB;AAEA,QAAIN,CAAC,GAAG,CAAR;;AACA,uBAA0B,IAA1B,EAAgC;AAAA;;AAAA,YAApBO,GAAoB;AAAA,YAAfT,IAAe;AAC5B,UAAII,IAAI,CAACJ,IAAD,EAAOE,CAAP,EAAU,IAAV,CAAR,EAAyBK,OAAO,CAACG,GAAR,CAAYD,GAAZ,EAAiBT,IAAjB;AACzBE,MAAAA,CAAC;AACJ;;AAED,WAAOK,OAAP;AACH;AAED;;;;;;;;;AAOAI,EAAAA,GAAG,CAACP,IAAD,EAAOC,OAAP,EAAgB;AACf,QAAIA,OAAJ,EAAaD,IAAI,GAAGA,IAAI,CAACE,IAAL,CAAUD,OAAV,CAAP;AAEb,UAAMO,KAAK,GAAG,IAAIC,KAAJ,CAAU,KAAKC,IAAf,CAAd;AACA,QAAIZ,CAAC,GAAG,CAAR;;AACA,SAAK,MAAMF,IAAX,IAAmB,KAAKC,MAAL,EAAnB,EAAkC;AAC9BW,MAAAA,KAAK,CAACV,CAAD,CAAL,GAAWE,IAAI,CAACJ,IAAD,EAAOE,CAAP,EAAU,IAAV,CAAf;AACAA,MAAAA,CAAC;AACJ;;AAED,WAAOU,KAAP;AACH;;AAtEwB;;AAyE7BG,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["/**\r\n * An extended Map with utility methods.\r\n * @class Collection\r\n */\r\nclass Collection extends Map {\r\n    /**\r\n     * Finds first matching value by property or function.\r\n     * Same as `Array#find`.\r\n     * @param {string|Function} propOrFunc - Property or function to test.\r\n     * @param {any} [value] - Value to find.\r\n     * @returns {any}\r\n     */\r\n    find(propOrFunc, value) {\r\n        if (typeof propOrFunc === 'string') {\r\n            if (typeof value === 'undefined') return null;\r\n            for (const item of this.values()) {\r\n                if (item[propOrFunc] === value) return item;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        if (typeof propOrFunc === 'function') {\r\n            let i = 0;\r\n            for (const item of this.values()) {\r\n                if (propOrFunc(item, i, this)) return item;\r\n                i++;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Filters cache by function.\r\n     * Same as `Array#filter`.\r\n     * @param {Function} func - Function to test.\r\n     * @param {any} [thisArg] - The context for the function.\r\n     * @returns {Collection}\r\n     */\r\n    filter(func, thisArg) {\r\n        if (thisArg) func = func.bind(thisArg);\r\n\r\n        const results = new this.constructor();\r\n\r\n        let i = 0;\r\n        for (const [key, item] of this) {\r\n            if (func(item, i, this)) results.set(key, item);\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Maps cache by function.\r\n     * Same as `Array#map`.\r\n     * @param {Function} func - Function to use.\r\n     * @param {any} [thisArg] - The context for the function.\r\n     * @returns {any[]}\r\n     */\r\n    map(func, thisArg) {\r\n        if (thisArg) func = func.bind(thisArg);\r\n\r\n        const array = new Array(this.size);\r\n        let i = 0;\r\n        for (const item of this.values()) {\r\n            array[i] = func(item, i, this);\r\n            i++;\r\n        }\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\nmodule.exports = Collection;\r\n"]},"metadata":{},"sourceType":"script"}